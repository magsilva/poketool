#!/bin/sh

# Copyright 2012 Marcos Lordello Chaim, Jos√© Carlos Maldonado, Mario Jino, 
# CCSL-ICMC <ccsl.icmc.usp.br>
# 
# This file is part of POKE-TOOL.
# 
# POKE-TOOL is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


###############################################################################
#									      #	
# pokeexec -- Shell file to execute test cases and save their inputs, paths   #
#	       and outputs.						      #
#				
#	
# Author: Marcos L. Chaim						      #
# Date: 94/7/6								      #
#									      # 
# Changes:								      #
# 95/03/17 - Multiunits treatment inserted. -- Chaim	
# 96/06/12 - Deletion of the file path.tes before the program execution - Sil #
#									      #	
###############################################################################

case $# in

0) echo 'Usage: pokeexec <executable program> -+lk -rnum -f<function name> [-f<function name>]'  1>&2 ; 
   echo '+l - program accepts parameter in command line.' 1>&2;
   echo '-l - program *does not* accept parameter in command line.' 1>&2;
   echo '+k - program accepts keyboard input.' 1>&2;
   echo '-k - program *does not* accept keyboard input.' 1>&2;
   echo '-rnum - takes the execution of test cases from test case 'num'.' 1>&2;
   exit 2;;

1) echo 'pokeexec error: incorrect number of parameters!' 1>&2 ;
   echo 'Usage: pokeexec <executable program> -f<function name> [-f<function name>]'  1>&2 ; 
   echo '+l - program accepts parameter in command line.' 1>&2;
   echo '-l - program *does not* accept parameter in command line.' 1>&2;
   echo '+k - program accepts keyboard input.' 1>&2;
   echo '-k - program *does not* accept keyboard input.' 1>&2;
   echo '-rnum - takes the execution of test cases from test case 'num'.' 1>&2;
   exit 2;;

*) program=$1;;

esac

#set -x
# Test if executable file exists.

if test -x $program
then
	:
else
	echo "pokeexec error: Don't exist executable program $program !"
	exit 2
fi

# Get functions name

shift

while test -n "$1" #!= ""
	do
	case $1 in
	+l) linepars=true;;
	-l) linepars=false;;

	-r*) recover=true;
	     num=`echo $1 | sed 's/-r//g'`;
             counter=$num;;

	+k) keyboard=true;;
	-k) keyboard=false;;

	 *) funcs="$funcs $1"
	esac
	shift
	done

# set recover var

if test "$recover" = ""
then
	recover=false;
fi

#echo $linepars
#echo $recover
#echo $keyboard
#echo $num $counter

# Find directories of the functions to be tested

for mod in  `echo $funcs | sed 's/-f//g'`
	do
	if test -d $mod
	then
		:
	else
		echo "pokeexec error: Don't exists prepared directory to function \"$mod\""
		exit 2
	fi
	done

echo =========================
echo "pokeexec: Starting test session to program \"$program\" ..."

echo ""

if test -d output
then

	if test "$recover" != "true"
	then
		echo "pokeexec: Deleting all files of the directory \"output\""
		rm -f output/*.tes
	fi
else
	mkdir output
fi


# Verify line paramenters input

if test "$linepars" = ""
then
	echo "pokeexec: Accepts parameters in command line ? (y/n) [y]"
	read linepars
	if test "$linepars" = n
		then
			linepars=false
		else
			linepars=true
	fi
fi

if test "$linepars" = "true"
	then
		if test -d input
		then
			if test "$recover" != true
			then
				echo "pokeexec: Deleting all files of the directory \"input\""
				rm -f input/*.tes
			fi
		else
			mkdir input
		fi

	fi

#echo $linepars

# Verify keyboard input 

if test "$keyboard" = ""
then
	echo "pokeexec: Accepts keyboard input? (y/n) [y]"
	read keyboard
	if test "$keyboard" = n
	then
		keyboard=false
	else
		keyboard=true
	fi
fi

if test "$keyboard" = "true"
then
		if test -d keyboard
		then
			if test "$recover" != true
			then
				echo "pokeexec: Deleting all files of the directory \"keyboard\""
				rm -f keyboard/*.tes
			fi
		else
			mkdir keyboard
		fi

	fi


# execute test cases

# initiate controling vars

counter=1

if test "$recover" = "true"
then
	if test "$num" != ""
	then
		counter=$num
	fi
fi

endofsession=y

echo =========================


#set -x
while test "$endofsession" = "y"
	do
	echo "pokeexec:  Executing test case $counter."

	if test "$linepars" = "true"
	then
		if test "$keyboard" = "true"
		then
			# there is keyboard input and parameters input

			echo 'pokeexec: Parameter:'
			read pars
			echo $pars > input/input$counter.tes
			echo 'pokeexec: Keyboard input:'
			read keyin
			echo $keyin > keyboard/keyboard$counter.tes
			echo "cat keyboard/keyboard$counter.tes | $program $pars | tee output/output$counter.tes" > cmd$$

		else # keyboard is false
			# There is no input from keyboard.

			echo 'pokeexec: Parameter:'
			read pars
			echo $pars > input/input$counter.tes
			echo "$program $pars | tee output/output$counter.tes" > cmd$$
		fi
	else # linepars is false
	# There is no input from line command invocation

		if test "$keyboard" = "true"
		then
			# There is input from keyboard but not from line command

			echo 'pokeexec: Keyboard input:'
			read keyin
			echo $keyin > keyboard/keyboard$counter.tes
			
			echo "cat keyboard/keyboard$counter.tes | $program | tee output/output$counter.tes" > cmd$$
		else
			# Only execute program and save output
			
			echo "$program | tee output/output$counter.tes" > cmd$$
		fi
	fi
	chmod +x cmd$$
	./cmd$$
	rm -f cmd$$
	echo
        echo =========================

	# save the path.tes file

	for mod in  `echo $funcs | sed 's/-f//g'`
	do
	if test -f $mod/path.tes
	then
		cp $mod/path.tes $mod/path$counter.tes
                rm -f $mod/path.tes   ####### Silvia's change #####
	else
		#echo "pokeexec: It was not created file \"$mod/path.tes\";"
		#echo "              \"$program\" probably the function \"$mod\" was not executed !"
		echo " 0" > $mod/path$counter.tes
#		exit 2
	fi
	done

	# increment counter
	counter=`expr $counter + 1`

	echo ""
	echo 'pokeexec: Do you want to continue to execute test cases? (y/n)[n]'
	read endofsession
	#echo "$endofsession"
	done 

#echo "pokeexec mensagem: Fim da Execucao de Casos de Teste para o \"$program\""
echo "pokeexec: OK"
echo =========================
echo ""
echo "Type <RETURN> to finish test case submission..."
read any

#set +x
